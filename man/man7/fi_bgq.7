.TH fi_bgq 7 "2016\-03\-18" "Libfabric Programmer\[aq]s Manual" "\@VERSION\@"
.SH NAME
.PP
The Blue Gene/Q Fabric Provider
.SH OVERVIEW
.PP
The bgq provider is a native implementation of the libfabric interfaces
that makes direct use of the unique hardware features such as the
Messaging Unit (MU), Base Address Table (BAT), and L2 Atomics.
.PP
The purpose of this provider is to demonstrate the scalability and
performance of libfabric, and to provide an "extreme scale" development
environment for applications and middleware using the libfabric API.
.SH SUPPORTED FEATURES
.PP
The bgq provider supports most features defined for the libfabric API.
Key features include:
.PP
\f[I]Endpoint types\f[] : The Blue Gene/Q hardware is connectionless and
reliable.
Therefore, the bgq provider only supports the \f[I]FI_EP_RDM\f[]
endpoint type.
.PP
\f[I]Endpoint capabilities\f[] : The following data transfer interfaces
are supported: \f[I]FI_MSG\f[], \f[I]FI_RMA\f[], \f[I]FI_TAGGED\f[],
\f[I]FI_MULTI_RECV\f[], \f[I]FI_READ\f[], \f[I]FI_WRITE\f[],
\f[I]FI_SEND\f[], \f[I]FI_RECV\f[], \f[I]FI_REMOTE_READ\f[], and
\f[I]FI_REMOTE_WRITE\f[].
.PP
\f[I]Modes\f[] : The bgq provider requires \f[I]FI_CONTEXT\f[] and
\f[I]FI_ASYNC_IOV\f[]
.PP
\f[I]Progress\f[] : Only \f[I]FI_PROGRESS_AUTO\f[] is supported, however
support for \f[I]FI_PROGRESS_MANUAL\f[] may be added in the future.
When progress is set to auto, a background thread runs to ensure that
progress is made for asynchronous requests.
.PP
\f[I]Address vector\f[] : Only the \f[I]FI_AV_MAP\f[] address vector
format is supported, however support for \f[I]FI_AV_TABLE\f[] may be
added in the future.
.PP
\f[I]Memory registration\f[] : Only \f[I]FI_MR_SCALABLE\f[] is
supported, however use of this mode for hardware accelerated rma
transfers is severely limited due to a mismatch between the libfabric
API and the Blue Gene/Q hardware capabilities.
Support for a non-standard version of \f[I]FI_MR_BASIC\f[] may be added
in the future which would enable hardware accelerated rma read, rma
write, and network atomic operations.
.SH UNSUPPORTED FEATURES
.PP
The bgq provider does not support \f[I]shared contexts\f[],
\f[I]multiple endpoints\f[], or \f[I]scalable endpoints\f[], however
support for all of these features may be added in the future.
.PP
The \f[I]FI_ATOMIC\f[] endpoint capability is disabled, however support
may be added in the future.
Native hardware accelerated atomic operations will require a
non-standard version of \f[I]FI_MR_BASIC\f[] that uses offset-based
remote addressing and will be limited to the operation-datatype
combinations common to the libfabric API and the Blue Gene/Q network
hardware.
.SH LIMITATIONS
.PP
The bgq provider only supports \f[I]FABRIC_DIRECT\f[].
The size of the fi_context structure for \f[I]FI_CONTEXT\f[] is too
small to be useful.
In the \[aq]direct\[aq] mode the bgq provider can re-define the struct
fi_context to a larger size - currently 64 bytes which is the L1 cache
size.
.PP
The fi_context structure for \f[I]FI_CONTEXT\f[] must be aligned to 8
bytes.
This requirement is because the bgq provider will use MU network atomics
to track completions and the memory used with MU atomic operations must
be aligned to 8 bytes.
Unfortunately, the libfabric API has no mechanism for applications to
programmatically determine these alignment requirements.
Because unaligned MU atomics operations are a fatal error, the bgq
provider will assert on the alignment for "debug" builds (i.e., the
\[aq]-DNDEBUG\[aq] pre-processor flag is not specified).
.PP
The progress thread used for \f[I]FI_PROGRESS_AUTO\f[] effectively
limits the maximum number of ranks-per-node to 32.
.PP
The definition of the memory region key size (mr_key_size) effectively
limits the maximum number of ranks-per-node to 2 for hardware
accelerated rma transfers.
This is because each compute node has a Base Address Table (BAT)
composed of 512 entries and must be shared among all processes on the
node.
The mr_key_size reports the number of \f[I]bytes\f[] for the size of the
memory region key variable which limits the maximum number of keys to
256 (2^8) even when the hardware could support 512 keys with 1
rank-per-node.
At 4 ranks-per-node and higher the maximum number of keys for each
process would be less than 256 and forces the bgq provider to report a
key size of zero bytes.
This effectively disables support for memory regions in
\f[I]FI_MR_SCALABLE\f[] mode.
.PP
It is invalid to register memory at the base virtual address "0" with a
length of "UINTPTR_MAX" (or equivalent).
The Blue Gene/Q hardware operates on 37-bit physical addresses and all
virtual addresses specified in the libfabric API, such as the location
of source/destination data and remote memory locations, must be
converted to a physical address before use.
A 64-bit virtual address space will not fit into a 37-bit physical
address space.
.PP
fi_trecvmsg() fnd fi_recvmsg() unctions do not support non-contiguous
receives and the iovec count must be 1.
The fi_trecvv() and fi_recvv() functions are currently not supported.
.SH RUNTIME PARAMETERS
.PP
No runtime parameters are currently defined.
.SH SEE ALSO
.PP
\f[C]fabric\f[](7), \f[C]fi_provider\f[](7), \f[C]fi_getinfo\f[](3)
.SH AUTHORS
OpenFabrics.
